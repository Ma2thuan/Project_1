//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Projekt_1.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Project1DBEntities : DbContext
    {
        public Project1DBEntities()
            : base("name=Project1DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<passbook> passbooks { get; set; }
        public virtual DbSet<SavingsAccountType> SavingsAccountTypes { get; set; }
        public virtual DbSet<SavingsDeposit> SavingsDeposits { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<WithdrawalSlip> WithdrawalSlips { get; set; }
    
        public virtual int InsertPassbook(Nullable<int> savingsBookID, Nullable<int> user_id, Nullable<System.DateTime> openingDate, Nullable<int> initialDepositAmount, Nullable<int> savingsType)
        {
            var savingsBookIDParameter = savingsBookID.HasValue ?
                new ObjectParameter("SavingsBookID", savingsBookID) :
                new ObjectParameter("SavingsBookID", typeof(int));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var openingDateParameter = openingDate.HasValue ?
                new ObjectParameter("OpeningDate", openingDate) :
                new ObjectParameter("OpeningDate", typeof(System.DateTime));
    
            var initialDepositAmountParameter = initialDepositAmount.HasValue ?
                new ObjectParameter("InitialDepositAmount", initialDepositAmount) :
                new ObjectParameter("InitialDepositAmount", typeof(int));
    
            var savingsTypeParameter = savingsType.HasValue ?
                new ObjectParameter("SavingsType", savingsType) :
                new ObjectParameter("SavingsType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPassbook", savingsBookIDParameter, user_idParameter, openingDateParameter, initialDepositAmountParameter, savingsTypeParameter);
        }
    
        public virtual int InsertSavingsDeposit(Nullable<int> savingsBookID, Nullable<int> depositAmount, Nullable<System.DateTime> depositDate)
        {
            var savingsBookIDParameter = savingsBookID.HasValue ?
                new ObjectParameter("SavingsBookID", savingsBookID) :
                new ObjectParameter("SavingsBookID", typeof(int));
    
            var depositAmountParameter = depositAmount.HasValue ?
                new ObjectParameter("DepositAmount", depositAmount) :
                new ObjectParameter("DepositAmount", typeof(int));
    
            var depositDateParameter = depositDate.HasValue ?
                new ObjectParameter("DepositDate", depositDate) :
                new ObjectParameter("DepositDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSavingsDeposit", savingsBookIDParameter, depositAmountParameter, depositDateParameter);
        }
    
        public virtual int InsertWithdrawalSlip(Nullable<int> savingsBookID, Nullable<int> withdrawalAmount, Nullable<System.DateTime> withdrawalDate)
        {
            var savingsBookIDParameter = savingsBookID.HasValue ?
                new ObjectParameter("SavingsBookID", savingsBookID) :
                new ObjectParameter("SavingsBookID", typeof(int));
    
            var withdrawalAmountParameter = withdrawalAmount.HasValue ?
                new ObjectParameter("WithdrawalAmount", withdrawalAmount) :
                new ObjectParameter("WithdrawalAmount", typeof(int));
    
            var withdrawalDateParameter = withdrawalDate.HasValue ?
                new ObjectParameter("WithdrawalDate", withdrawalDate) :
                new ObjectParameter("WithdrawalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertWithdrawalSlip", savingsBookIDParameter, withdrawalAmountParameter, withdrawalDateParameter);
        }
    }
}
